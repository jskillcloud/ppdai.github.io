<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拍拍贷基础框架团队博客</title>
  
  <subtitle>致力于成为互联网行业一流的框架技术团队</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-01T07:07:32.827Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>基础框架</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象编程（中）</title>
    <link href="http://yoursite.com/2018/01/19/20180119_2/"/>
    <id>http://yoursite.com/2018/01/19/20180119_2/</id>
    <published>2018-01-19T06:34:40.000Z</published>
    <updated>2018-02-01T07:07:32.827Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.面向过程与面向对象</strong></p><p>传统流程中我们编写一个一个函数来解决需求，这是一种面向过程的实现方式，使用这种方式，页面中会增加很多全局变量，而且不利于别人重复使用，一旦别人使用以前提供的方法，就不能轻易地修改，这不利于团队代码维护。<br>面向对象编程就是将需求抽象成一个对象，然后针对这个对象分析其特征（属性）与动作（方法）。这个对象我们称之为类。<br>面向对象编程思想中有一个特点，封装，就是说把你需要的功能放在一个对象里。对于JavaScript这种解释性的弱类型语言来说，没有经典强类型语言中那种通过class等关键字实现的类的封装方式，JavaScript中都是通过一些特性模仿实现的，但这也带来了极高的灵活性。</p><a id="more"></a><p><strong>2.封装</strong></p><p><em>2.1 创建一个类</em></p><p>首先声明一个函数保存在一个变量里（一般首字母大写）。<br>然后在这个函数（类）的内部对this变量添加属性和方法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span><span class="params">(id, bookname, price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.bookname = bookname;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在类的原型上添加属性和方法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype.display = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//展示这本书</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype = &#123;</span><br><span class="line">    display: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们不能直接使用这个Book类，需要用new关键字来实例化新的对象，使用实例化对象的属性或方法时，通过点语法访问。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="keyword">new</span> <span class="type">Book</span>(<span class="number">10</span>, <span class="string">'JavaScript'</span>, <span class="number">50</span>);</span><br><span class="line">console.log(book.price);         <span class="comment">//50</span></span><br></pre></td></tr></table></figure><p>通过this定义的属性或方法是该对象自身拥有的，每次通过类创建一个新对象时，this指向的属性和方法都会得到相应的创建，而通过prototype继承的属性或方法是每个对象通过prototype访问到，所以我们每次通过类创建一个新对象时这些属性和方法不会再次创建。</p><p><em>2.2 属性与方法封装</em></p><p>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过此特性即可创建类的私有属性以及私有方法。<br>而在函数内部通过this创建的属性和方法可看作对象公有属性和对象公有方法。<br>通过this创建的方法，不但可以访问对象的公有属性和公有方法，还能访问到类或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。<br>在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性，因此这些在创建对象时调用的特权方法还可以看作是类的构造器。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span><span class="params">(id, name, price)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkId</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//特权方法</span></span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//对象公有属性</span></span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="comment">//对象公有方法</span></span><br><span class="line">    <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">this</span>.setName(name);</span><br><span class="line">    <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类外面通过点语法定义的属性以及方法被称为类的静态公有属性和类的静态公有方法。<br>而类通过prototype创建的属性或者方法在类实例的对象中是可以通过this访问到的，所以我们将prototype对象中的属性和方法称为公有属性和公有方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类静态公有属性（对象不能访问）</span></span><br><span class="line">Book.isChinese = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//类静态公有方法（对象不能访问）</span></span><br><span class="line">Book.resetTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new Tiem'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    isJSBook: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要想在新创建的对象中使用isChinese需要通过Book类使用而不能通过this，如<code>Book.isChinese</code>，而类的原型prototype上定义的属性在新对象里可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">new</span> <span class="title">Book</span>(<span class="number">10</span>, '<span class="type">JavaScript</span>', <span class="number">50</span>);</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.num);                 <span class="comment">//undefined</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.isJSBook);            <span class="comment">//false</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.id);                  <span class="comment">//10</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.isChinese);           <span class="comment">//undefined</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="type">Book</span>.isChinese);        <span class="comment">//true</span></span></span><br><span class="line"><span class="function"><span class="title">Book</span>.<span class="title">resetTime</span>();                   <span class="comment">//new Tiem</span></span></span><br></pre></td></tr></table></figure><p><em>2.3 闭包实现</em></p><p>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。<br>我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可以访问到类函数作用域中的变量，此时这个变量叫静态私有变量，而可访问的方法叫静态私有方法。当然闭包内部也有其自身的私有变量以及私有方法。<br>在闭包外部添加原型属性和方法看上去像是脱离了闭包这个类，所以我们有时候在闭包内部实现一个完整的类然后将其返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用闭包实现</span></span><br><span class="line"><span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//静态私有变量</span></span><br><span class="line">    <span class="keyword">var</span> bookName = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//静态私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkBook</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//创建类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_book</span>(<span class="params">newId, newName, newPrice</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//私有变量</span></span><br><span class="line">        <span class="keyword">var</span> name, price;</span><br><span class="line">        <span class="comment">//私有方法</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params">id</span>) </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//特权方法</span></span><br><span class="line">        <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="comment">//公有属性</span></span><br><span class="line">        <span class="keyword">this</span>.id = newId;</span><br><span class="line">        <span class="comment">//公有方法</span></span><br><span class="line">        <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        bookNum++;</span><br><span class="line">        <span class="keyword">if</span> (bookNum &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>);</span><br><span class="line">        <span class="comment">//构造器</span></span><br><span class="line">        <span class="keyword">this</span>.setName(newName);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建原型</span></span><br><span class="line">    _book.prototype = &#123;</span><br><span class="line">        <span class="comment">//静态公有属性</span></span><br><span class="line">        isJSBook: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//静态公有方法</span></span><br><span class="line">        display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回类</span></span><br><span class="line">    <span class="keyword">return</span> _book;</span><br><span class="line">&#125;) ();</span><br></pre></td></tr></table></figure><p><em>2.4 创建对象的安全模式</em></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书类</span></span><br><span class="line">var Book = function(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>) &#123;</span><br><span class="line">    this.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">    this.<span class="built_in">time</span> = <span class="built_in">time</span>;</span><br><span class="line">    this.<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化一本书</span></span><br><span class="line">var book = Book('JavaScript', '<span class="number">2017</span>', 'js');</span><br><span class="line">console.<span class="built_in">log</span>(book);                  <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">title</span>);          <span class="comment">//JavaScript</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">time</span>);           <span class="comment">//2017</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">type</span>);           <span class="comment">//js</span></span><br></pre></td></tr></table></figure><p>new关键字的作用可以看作是对当前对象的this不停的赋值，然而例子中没有用new，所以就会直接执行这个函数，而这个函数是在全局作用域中执行的，所以属性被添加到了window上面。又因为函数中没有return语句，所以得到了undefined。<br>为了避免这种情况，我们可以使用安全模式。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书安全类</span></span><br><span class="line">var Book = function(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>) &#123;</span><br><span class="line">    <span class="comment">//判断执行过程中this是否是当前这个对象（如果是说明是用new创建的）</span></span><br><span class="line">    <span class="keyword">if</span>(this instanceof Book) &#123;</span><br><span class="line">        this.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">        this.<span class="built_in">time</span> = <span class="built_in">time</span>;</span><br><span class="line">        this.<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var book = Book('JavaScript', '<span class="number">2017</span>', 'js');</span><br><span class="line">console.<span class="built_in">log</span>(book);                  <span class="comment">//Book</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">title</span>);            <span class="comment">//JavaScript</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">time</span>);             <span class="comment">//2017</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">type</span>);             <span class="comment">//js</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">title</span>);          <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">time</span>);           <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">type</span>);           <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.面向过程与面向对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统流程中我们编写一个一个函数来解决需求，这是一种面向过程的实现方式，使用这种方式，页面中会增加很多全局变量，而且不利于别人重复使用，一旦别人使用以前提供的方法，就不能轻易地修改，这不利于团队代码维护。&lt;br&gt;面向对象编程就是将需求抽象成一个对象，然后针对这个对象分析其特征（属性）与动作（方法）。这个对象我们称之为类。&lt;br&gt;面向对象编程思想中有一个特点，封装，就是说把你需要的功能放在一个对象里。对于JavaScript这种解释性的弱类型语言来说，没有经典强类型语言中那种通过class等关键字实现的类的封装方式，JavaScript中都是通过一些特性模仿实现的，但这也带来了极高的灵活性。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象编程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp使用心得</title>
    <link href="http://yoursite.com/2018/01/19/20180119_1/"/>
    <id>http://yoursite.com/2018/01/19/20180119_1/</id>
    <published>2018-01-19T06:16:13.000Z</published>
    <updated>2018-01-30T07:05:15.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OkHttp是一款适用于Android和Java应用程序的HTTP&amp;HTTP2客户端。它有如下特性：</p><ul><li>支持http2，对一台机器的所有请求共享同一个socket </li><li>内置连接池，支持连接复用，减少延迟 </li><li>支持透明的gzip压缩响应体 </li><li>通过缓存避免重复的请求 </li><li>请求失败时自动重试主机的其他ip，自动重定向 </li><li>好用的API</li></ul><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>以Java为例，通常使用Maven构建方式，在pom文件中加入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><ol><li>先实例化okhttp，构建一个request，由于get是默认方式，所以设置一个url地址就可以了，也可以通过Request.Builder设置更多的参数。</li><li>然后通过client创建一个call对象并发送请求。</li><li>通过response.body().string()获取返回的字符串。这个body()其实就是ResponseBody对象。</li></ol><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Request</span> <span class="built_in">request</span> = <span class="keyword">new</span> <span class="built_in">Request</span>.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Response</span> <span class="built_in">response</span> = client.newCall(<span class="built_in">request</span>).<span class="keyword">execute</span>();</span><br><span class="line"><span class="built_in">String</span> responseBody = <span class="built_in">response</span>.body().<span class="built_in">string</span>();</span><br></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><ul><li>提交字符串</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"text/plain; charset=utf-8"</span>);</span><br><span class="line"><span class="attribute">String str</span> = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, str);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure><ul><li>提交json</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"><span class="attribute">String json</span> = <span class="string">"&#123;'name':'kmt','sex':'man'&#125;"</span>;</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, json);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure><ul><li>提交form表单</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient<span class="built_in"> client </span>= new OkHttpClient();</span><br><span class="line"></span><br><span class="line">RequestBody body = new FormBody.Builder()</span><br><span class="line">    .<span class="builtin-name">add</span>(<span class="string">"name"</span>, <span class="string">"kmt"</span>)</span><br><span class="line">    .<span class="builtin-name">add</span>(<span class="string">"sex"</span>, <span class="string">"man"</span>)</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">String responseBody = response.body().string();</span><br></pre></td></tr></table></figure><ul><li>上传文件</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="attribute">File file</span> = new File(<span class="string">"/file/test.png"</span>);</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, file);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure><ul><li>提交分块请求</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="attribute">File file</span> = new File(<span class="string">"/file/test.png"</span>);</span><br><span class="line"><span class="attribute">RequestBody fileBody</span> = RequestBody.create(mediaType, file);</span><br><span class="line"></span><br><span class="line"><span class="attribute">RequestBody requestBody</span> = new MultipartBody.Builder()</span><br><span class="line">    .setType(MultipartBody.FORM)</span><br><span class="line">    .addFormDataPart(<span class="string">"file"</span>, <span class="string">"test_img"</span>, fileBody)</span><br><span class="line">    .addFormDataPart(<span class="string">"name"</span>, <span class="string">"kmt"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(requestBody)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>设置超时时间</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient<span class="built_in"> client </span>= new OkHttpClient.Builder()</span><br><span class="line">    .connectTimeout(10, TimeUnit.SECONDS)</span><br><span class="line">    .readTimeout(10,TimeUnit.SECONDS)</span><br><span class="line">    .writeTimeout(10,TimeUnit.SECONDS)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><ul><li>添加请求头</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Request request = new Request.Builder()</span><br><span class="line"><span class="meta">    .url</span>(url)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"authorization"</span>, authorization)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"cache-control"</span>, <span class="string">"no-cache"</span>)</span><br><span class="line"><span class="meta">    .post</span>(body)</span><br><span class="line"><span class="meta">    .build</span>()<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>异步</li></ul><p>client.newCall(request).execute()是同步的，client.newCall(request).enqueue()是异步的。onFailure是请求失败执行的方法，onResponse是请求成功执行的方法。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">client.newCall(<span class="built_in">request</span>).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void onFailure(<span class="keyword">Call</span> <span class="keyword">call</span>, IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void onResponse(<span class="keyword">Call</span> <span class="keyword">call</span>, <span class="built_in">Response</span> <span class="built_in">response</span>) throws IOException &#123;</span><br><span class="line">        <span class="built_in">String</span> responseBody = <span class="built_in">response</span>.body().<span class="built_in">string</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;OkHttp是一款适用于Android和Java应用程序的HTTP&amp;amp;HTTP2客户端。它有如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持http2，对一台机器的所有请求共享同一个socket &lt;/li&gt;
&lt;li&gt;内置连接池，支持连接复用，减少延迟 &lt;/li&gt;
&lt;li&gt;支持透明的gzip压缩响应体 &lt;/li&gt;
&lt;li&gt;通过缓存避免重复的请求 &lt;/li&gt;
&lt;li&gt;请求失败时自动重试主机的其他ip，自动重定向 &lt;/li&gt;
&lt;li&gt;好用的API&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="OkHttp" scheme="http://yoursite.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程（上）</title>
    <link href="http://yoursite.com/2018/01/13/20180113/"/>
    <id>http://yoursite.com/2018/01/13/20180113/</id>
    <published>2018-01-13T09:36:00.000Z</published>
    <updated>2018-01-14T09:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象编程（Object-oriented programming，OOP）是一种程序设计范型。它将对象作为程序的基本单元，将程序和数据封装其中，以提高程序的重用性、灵活性和扩展性。</p><p><strong>1.用对象收编变量</strong></p><p>对象有属性和方法，我们要访问它的属性或者方法时，可通过点语法向下遍历查询得到。<br>例如：我们可以创建一个检测对象，然后把我们的方法放在里面。</p><a id="more"></a><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用它们很简单，比如检测姓名：<code>CheckObject.checkName();</code></p><p><strong>2.对象的另一种形式</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">CheckObject.checkName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkEmail = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkPassword = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用和前面的方式是一样的，但这个对象不能复制一份，或者说这个对象类在用new关键字创建新的对象时，新创建的对象是不能继承这些方法的。</p><p><strong>3.真假对象</strong></p><p>如果想简单地复制一下对象，可以将方法放在一个函数对象中。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证姓名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证邮箱</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证密码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当每次调用这个函数的时候都返回了一个新对象，这样每个人在使用时就互不影响了。<br>例如检测邮箱：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = CheckObject()<span class="comment">;</span></span><br><span class="line">a.checkEmail()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>4.类也可以</strong></p><p>上面并不是一个真正意义上类的创建方式，并且创建的对象a和对象CheckObject没有任何关系（返回出来的对象本身与CheckObject对象无关）。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.checkEmail = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.checkPassword = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样的对象就可以看成类了，用类创建对象需要用到关键字new。</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">new</span> <span class="title">CheckObject</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkEmail</span>();</span></span><br></pre></td></tr></table></figure><p><strong>5.一个检测类</strong></p><p>上面的类把所有的方法放在函数内部，通过this定义，所以每一次通过new关键字创建新对象的时候，新创建的对象都会对类的this上的属性进行复制，所以这些新创建的对象都会有自己的一套方法，然而有时候这么做造成的消耗是很奢侈的，我们需要处理一下。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样创建对象实例的时候，创建出来的对象所拥有的方法就都是一个了，因为它们都要依赖prototype原型依次寻找，而找到的方法都是同一个，它们都绑定在CheckObject对象类的原型上。</p><p><strong>6.方法还可以这样用</strong></p><p>使用上面方式定义的类如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">new</span> <span class="title">CheckObject</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkName</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkEmail</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkPassword</span>();</span></span><br></pre></td></tr></table></figure><p>调用了3个方法，但是对象a书写了3遍，这是可以避免的，需要在声明的每一个方法末尾处将当前对象返回，在JS中this指向的就是当前对象。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkName().checkEmail().checkPassword();</span><br></pre></td></tr></table></figure><p>当然同样的方式还可以放到类的原型对象中。</p><p><strong>7.函数的祖先</strong></p><p>prototype.js是一款JS框架，里面为我们方便地封装了很多方法，它最大的特点就是对源生对象（Function、Array、Object等）的拓展。<br>比如你想给每一个函数都添加一个检测邮箱的方法：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span>.checkEmail  = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">    //验证邮箱</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">f.checkEmail();</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">()</span>;</span></span><br><span class="line">f.checkEmail();</span><br></pre></td></tr></table></figure><p>注意，这么做是不允许的，因为你污染了原生对象Function，所以别人创建的函数也会被你创建的函数所污染，造成不必要的开销，但是你可以抽象出一个统一添加方法的功能方法。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span>.addMethod = <span class="function"><span class="keyword">function</span><span class="params">(name, fn)</span></span> &#123;</span><br><span class="line">    this[<span class="keyword">name</span>] = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methods.addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;);</span><br><span class="line">methods.checkEmail();</span><br></pre></td></tr></table></figure><p>这样只有methods对象才有checkEmail方法。</p><p><strong>8.链式添加方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.addMethod = <span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[name] = fn;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">methods.addMethod(<span class="string">'checkName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;).addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意上面只是链式添加方法，不能链式使用，如果使用<code>methods.checkName().checkEmail()</code>只会执行<code>checkName()</code>方法并报如下错误：<code>Cannot read property &#39;checkEmail&#39; of undefined.</code><br>如果想要链式使用，添加的每个方法需要将this返回。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">methods.addMethod(<span class="string">'checkName'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;).addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在<code>methods.checkName().checkEmail()</code>就可以正常运行了。</p><p><strong>9.用类式调用方式使用方法</strong></p><p>添加方法跟上面一样，但在使用的时候要注意了，不能直接使用，要通过new关键字来创建新对象。</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">new</span> <span class="title">Methods</span>();</span></span><br><span class="line"><span class="function"><span class="title">m</span>.<span class="title">checkEmail</span>();</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象编程（Object-oriented programming，OOP）是一种程序设计范型。它将对象作为程序的基本单元，将程序和数据封装其中，以提高程序的重用性、灵活性和扩展性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.用对象收编变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对象有属性和方法，我们要访问它的属性或者方法时，可通过点语法向下遍历查询得到。&lt;br&gt;例如：我们可以创建一个检测对象，然后把我们的方法放在里面。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象编程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/12/20180112/"/>
    <id>http://yoursite.com/2018/01/12/20180112/</id>
    <published>2018-01-12T09:36:00.000Z</published>
    <updated>2018-01-31T09:39:18.221Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
