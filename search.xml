<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[java8 reactor模式的实现之CompletableFuture]]></title>
      <url>/2018/02/02/CompleteableFuture/</url>
      <content type="html"><![CDATA[<p>java8中新增加了java.util.concurrent.CompletableFuture类，作用类似RxJava。</p>
<p>实际开发中，我们经常需要达成以下目的：</p>
<ul>
<li>将两个异步计算合并为一个——这两个异步计算之间相互独立，同时第二个又依赖于第一个的结果。</li>
<li>等待 Future 集合中的所有任务都完成。</li>
<li>仅等待 Future 集合中最快结束的任务完成（有可能因为它们试图通过不同的方式计算同一个值），并返回它的结果。</li>
<li>通过编程方式完成一个 Future 任务的执行（即以手工设定异步操作结果的方式）。</li>
<li>应对 Future 的完成事件（即当 Future 的完成事件发生时会收到通知，并能使用 Future 计算的结果进行下一步的操作，不只是简单地阻塞等待操作的结果）</li>
</ul>
<p>新的CompletableFuture将使得这些成为可能。</p>
<a id="more"></a>
<h2 id="工厂构建"><a href="#工厂构建" class="headerlink" title="工厂构建"></a>工厂构建</h2><ul>
<li><p>runAsync , supplyAsync</p>
<blockquote>
<p>静态方法，创建一个CompletableFuture，runAsync没有返回值，supplyAsync有返回值</p>
</blockquote>
</li>
<li><p>completedFuture</p>
<blockquote>
<p>静态方法，创建一个已经完成的CompletableFuture</p>
</blockquote>
</li>
</ul>
<h2 id="等待完成"><a href="#等待完成" class="headerlink" title="等待完成"></a>等待完成</h2><ul>
<li><p>get</p>
<blockquote>
<p>等待完成，并获取结果</p>
</blockquote>
</li>
<li><p>join</p>
<blockquote>
<p>将异步执行的线程join过来，跟get类似，等待完成，但是是不返回结果</p>
</blockquote>
</li>
</ul>
<h2 id="设置状态"><a href="#设置状态" class="headerlink" title="设置状态"></a>设置状态</h2><ul>
<li><p>complete,completeExceptionally</p>
<blockquote>
<p>设置CompletableFuture为完成，用指定的对象返回</p>
</blockquote>
</li>
<li><p>obtrudeValue,obtrudeException</p>
<blockquote>
<p>强制返回/抛异常</p>
</blockquote>
</li>
<li><p>cancel</p>
<blockquote>
<p>取消</p>
</blockquote>
</li>
</ul>
<h2 id="根据状态操作"><a href="#根据状态操作" class="headerlink" title="根据状态操作"></a>根据状态操作</h2><ul>
<li><p>whenComplete</p>
<blockquote>
<p>当本 CompletableFuture 执行完成后使用 BiConsumer 函数返回一个新的CompletableFuture， BiConsumer 第一个参数为返回值，第二个参数为异常</p>
</blockquote>
</li>
<li><p>handle</p>
<blockquote>
<p>当本CompletableFuture 执行完成后执行 BiConsumer 的函数，BiFunction第一个参数为返回值，第二个参数为异常，需要返回</p>
</blockquote>
</li>
<li><p>exceptionally</p>
<blockquote>
<p>当本CompletableFuture执行异常时，使用Function返回一个新的CompletableFuture</p>
</blockquote>
</li>
</ul>
<h2 id="状态判断"><a href="#状态判断" class="headerlink" title="状态判断"></a>状态判断</h2><ul>
<li>isDone,isCompletedExceptionally,isCancelled<blockquote>
<p>返回是否完成/异常/取消</p>
</blockquote>
</li>
</ul>
<h2 id="逻辑转换，单个"><a href="#逻辑转换，单个" class="headerlink" title="逻辑转换，单个"></a>逻辑转换，单个</h2><ul>
<li><p>thenApply,thenApplyAsync</p>
<blockquote>
<p>CompletableFuture正常结束后，使用Function函数应用一个新的CompletableFuture，Function函数有返回值</p>
</blockquote>
</li>
<li><p>thenAccept</p>
<blockquote>
<p>CompletableFuture正常结束后，使用Consumer函数应用一个新的CompletableFuture，Consumer函数没有返回值</p>
</blockquote>
</li>
<li><p>thenRun</p>
<blockquote>
<p>CompletableFuture正常结束后，使用Runnable函数应用一个新的CompletableFuture，Runnable函数没有输入值和返回值</p>
</blockquote>
</li>
</ul>
<h1 id="逻辑转换，两个"><a href="#逻辑转换，两个" class="headerlink" title="逻辑转换，两个"></a>逻辑转换，两个</h1><ul>
<li><p>thenAcceptBoth</p>
<blockquote>
<p>当本CompletableFuture和给定的CompletableFuture正常完成后，执行BiFunction函数并返回，BiFunction的输入参数为两个CompletableFuture的返回值</p>
</blockquote>
</li>
<li><p>thenCombine</p>
<blockquote>
<p>当本CompletableFuture和给定的CompletableFuture正常完成后，使用BiFunction函数生成一个新的CompletableFuture，BiFunction的输入参数为两个CompletableFuture的返回值。<br>两个CompletableFuture执行完后再执行指定函数</p>
</blockquote>
</li>
<li><p>thenCompose</p>
<blockquote>
<p>当本CompletableFuture完成后，将返回结果作为参数传递给Function函数，此Function函数返回一个新的CompletableFuture。<br>第一个CompletableFuture执行完后，结果传递给第二个CompletableFuture，返回第二个CompletableFuture</p>
</blockquote>
</li>
<li><p>applyToEither</p>
<blockquote>
<p>本 CompletableFuture 或者给定的CompletableFuture，任意一个做完后，使用Function生成一个新的CompletableFuture并返回</p>
</blockquote>
</li>
<li><p>acceptEither</p>
<blockquote>
<p>本 CompletableFuture 或者给定的CompletableFuture，任意一个做完后，使用Consumer生成一个新的CompletableFuture并返回</p>
</blockquote>
</li>
<li><p>runAfterEither</p>
<blockquote>
<p>本 CompletableFuture 或者给定的 CompletableFuture，任意一个做完后，使用Runnable生成一个新的CompletableFuture并返回</p>
</blockquote>
</li>
<li><p>runAfterBoth</p>
<blockquote>
<p>本CompletableFuture和给定的CompletableFuture，都完成后，使用Runnable生成一个新的CompletableFuture并返回</p>
</blockquote>
</li>
</ul>
<h2 id="逻辑转换，多个"><a href="#逻辑转换，多个" class="headerlink" title="逻辑转换，多个"></a>逻辑转换，多个</h2><ul>
<li><p>allOf</p>
<blockquote>
<p>静态方法，返回一个新的CompletableFuture，当所有的CompletableFuture都完成后才完成</p>
</blockquote>
</li>
<li><p>anyOf</p>
<blockquote>
<p>静态方法，返回一个新的CompletableFuture，任意一个CompletableFuture都完成后就完成</p>
</blockquote>
</li>
</ul>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> class CompletableFutureTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> sleep(<span class="built_in">int</span> s) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test1() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//告诉completableFuture任务已经完成</span></span><br><span class="line">            completableFuture.complete(<span class="string">"result"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//获取任务结果，如果没有完成会一直阻塞等待</span></span><br><span class="line">        <span class="keyword">String</span> result = completableFuture.<span class="built_in">get</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"计算结果:"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test2() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"task doing..."</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"抛异常了"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//告诉completableFuture任务发生异常了</span></span><br><span class="line">                completableFuture.completeExceptionally(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//获取任务结果，如果没有完成会一直阻塞等待</span></span><br><span class="line">        <span class="keyword">String</span> result = completableFuture.<span class="built_in">get</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"计算结果:"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test3() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//supplyAsync内部使用ForkJoinPool线程池执行任务</span></span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"计算结果:"</span> + completableFuture.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test4() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task1 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"result1"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task2 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"result2"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;<span class="keyword">Object</span>&gt; anyResult = CompletableFuture.anyOf(completableFuture1, completableFuture2);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"第一个完成的任务结果:"</span> + anyResult.<span class="built_in">get</span>());</span><br><span class="line">        CompletableFuture&lt;Void&gt; allResult = CompletableFuture.allOf(completableFuture1, completableFuture2);</span><br><span class="line">        <span class="comment">//阻塞等待所有任务执行完成</span></span><br><span class="line">        allResult.<span class="built_in">join</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"所有任务执行完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test5() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task1 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"result1"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等第一个任务完成后，将任务结果传给参数result，执行后面的任务并返回一个代表任务的completableFuture</span></span><br><span class="line">        CompletableFuture&lt;<span class="keyword">String</span>&gt; completableFuture2 = completableFuture1.thenCompose(result -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task2 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"result2"</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(completableFuture2.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test6() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task1 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将第一个任务与第二个任务组合一起执行，都执行完成后，将两个任务的结果合并</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture2 = completableFuture1.thenCombine(</span><br><span class="line">                <span class="comment">//第二个任务</span></span><br><span class="line">                CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"task2 doing..."</span>);</span><br><span class="line">                    sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2000</span>;</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="comment">//合并函数</span></span><br><span class="line">                (result1, result2) -&gt; result1 + result2);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(completableFuture2.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test7() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task1 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册完成事件</span></span><br><span class="line">        completableFuture1.thenAccept(result -&gt; System.out.<span class="built_in">println</span>(<span class="string">"task1 done,result:"</span> + result));</span><br><span class="line">        <span class="comment">//第二个任务</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟执行耗时任务</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"task2 doing..."</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2000</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册完成事件</span></span><br><span class="line">        completableFuture2.thenAccept(result -&gt; System.out.<span class="built_in">println</span>(<span class="string">"task2 done,result:"</span> + result));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将第一个任务与第二个任务组合一起执行，都执行完成后，将两个任务的结果合并</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture3 = completableFuture1.thenCombine(completableFuture2,</span><br><span class="line">                <span class="comment">//合并函数</span></span><br><span class="line">                (result1, result2) -&gt; &#123;</span><br><span class="line">                    sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> result1 + result2;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(completableFuture3.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程（中）]]></title>
      <url>/2018/01/19/20180119_2/</url>
      <content type="html"><![CDATA[<p><strong>1.面向过程与面向对象</strong></p>
<p>传统流程中我们编写一个一个函数来解决需求，这是一种面向过程的实现方式，使用这种方式，页面中会增加很多全局变量，而且不利于别人重复使用，一旦别人使用以前提供的方法，就不能轻易地修改，这不利于团队代码维护。<br>面向对象编程就是将需求抽象成一个对象，然后针对这个对象分析其特征（属性）与动作（方法）。这个对象我们称之为类。<br>面向对象编程思想中有一个特点，封装，就是说把你需要的功能放在一个对象里。对于JavaScript这种解释性的弱类型语言来说，没有经典强类型语言中那种通过class等关键字实现的类的封装方式，JavaScript中都是通过一些特性模仿实现的，但这也带来了极高的灵活性。</p>
<a id="more"></a>
<p><strong>2.封装</strong></p>
<p><em>2.1 创建一个类</em></p>
<p>首先声明一个函数保存在一个变量里（一般首字母大写）。<br>然后在这个函数（类）的内部对this变量添加属性和方法：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span><span class="params">(id, bookname, price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.bookname = bookname;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在类的原型上添加属性和方法：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype.display = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//展示这本书</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.prototype = &#123;</span><br><span class="line">    display: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们不能直接使用这个Book类，需要用new关键字来实例化新的对象，使用实例化对象的属性或方法时，通过点语法访问。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="keyword">new</span> <span class="type">Book</span>(<span class="number">10</span>, <span class="string">'JavaScript'</span>, <span class="number">50</span>);</span><br><span class="line">console.log(book.price);         <span class="comment">//50</span></span><br></pre></td></tr></table></figure>
<p>通过this定义的属性或方法是该对象自身拥有的，每次通过类创建一个新对象时，this指向的属性和方法都会得到相应的创建，而通过prototype继承的属性或方法是每个对象通过prototype访问到，所以我们每次通过类创建一个新对象时这些属性和方法不会再次创建。</p>
<p><em>2.2 属性与方法封装</em></p>
<p>由于JavaScript的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过此特性即可创建类的私有属性以及私有方法。<br>而在函数内部通过this创建的属性和方法可看作对象公有属性和对象公有方法。<br>通过this创建的方法，不但可以访问对象的公有属性和公有方法，还能访问到类或对象自身的私有属性和私有方法，由于这些方法权利比较大，所以我们又将它看作特权方法。<br>在对象创建时通过使用这些特权方法我们可以初始化实例对象的一些属性，因此这些在创建对象时调用的特权方法还可以看作是类的构造器。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span><span class="params">(id, name, price)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkId</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//特权方法</span></span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//对象公有属性</span></span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="comment">//对象公有方法</span></span><br><span class="line">    <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">this</span>.setName(name);</span><br><span class="line">    <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在类外面通过点语法定义的属性以及方法被称为类的静态公有属性和类的静态公有方法。<br>而类通过prototype创建的属性或者方法在类实例的对象中是可以通过this访问到的，所以我们将prototype对象中的属性和方法称为公有属性和公有方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类静态公有属性（对象不能访问）</span></span><br><span class="line">Book.isChinese = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//类静态公有方法（对象不能访问）</span></span><br><span class="line">Book.resetTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new Tiem'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    isJSBook: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>要想在新创建的对象中使用isChinese需要通过Book类使用而不能通过this，如<code>Book.isChinese</code>，而类的原型prototype上定义的属性在新对象里可以直接使用，这是因为新对象的prototype和类的prototype指向的是同一个对象。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">new</span> <span class="title">Book</span>(<span class="number">10</span>, '<span class="type">JavaScript</span>', <span class="number">50</span>);</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.num);                 <span class="comment">//undefined</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.isJSBook);            <span class="comment">//false</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.id);                  <span class="comment">//10</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(b.isChinese);           <span class="comment">//undefined</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="type">Book</span>.isChinese);        <span class="comment">//true</span></span></span><br><span class="line"><span class="function"><span class="title">Book</span>.<span class="title">resetTime</span>();                   <span class="comment">//new Tiem</span></span></span><br></pre></td></tr></table></figure>
<p><em>2.3 闭包实现</em></p>
<p>闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。<br>我们将这个闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数，即可以访问到类函数作用域中的变量，此时这个变量叫静态私有变量，而可访问的方法叫静态私有方法。当然闭包内部也有其自身的私有变量以及私有方法。<br>在闭包外部添加原型属性和方法看上去像是脱离了闭包这个类，所以我们有时候在闭包内部实现一个完整的类然后将其返回。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用闭包实现</span></span><br><span class="line"><span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//静态私有变量</span></span><br><span class="line">    <span class="keyword">var</span> bookName = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//静态私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkBook</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//创建类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_book</span>(<span class="params">newId, newName, newPrice</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//私有变量</span></span><br><span class="line">        <span class="keyword">var</span> name, price;</span><br><span class="line">        <span class="comment">//私有方法</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params">id</span>) </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//特权方法</span></span><br><span class="line">        <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        <span class="comment">//公有属性</span></span><br><span class="line">        <span class="keyword">this</span>.id = newId;</span><br><span class="line">        <span class="comment">//公有方法</span></span><br><span class="line">        <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">        bookNum++;</span><br><span class="line">        <span class="keyword">if</span> (bookNum &gt; <span class="number">100</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>);</span><br><span class="line">        <span class="comment">//构造器</span></span><br><span class="line">        <span class="keyword">this</span>.setName(newName);</span><br><span class="line">        <span class="keyword">this</span>.setPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建原型</span></span><br><span class="line">    _book.prototype = &#123;</span><br><span class="line">        <span class="comment">//静态公有属性</span></span><br><span class="line">        isJSBook: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//静态公有方法</span></span><br><span class="line">        display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回类</span></span><br><span class="line">    <span class="keyword">return</span> _book;</span><br><span class="line">&#125;) ();</span><br></pre></td></tr></table></figure>
<p><em>2.4 创建对象的安全模式</em></p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书类</span></span><br><span class="line">var Book = function(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>) &#123;</span><br><span class="line">    this.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">    this.<span class="built_in">time</span> = <span class="built_in">time</span>;</span><br><span class="line">    this.<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化一本书</span></span><br><span class="line">var book = Book('JavaScript', '<span class="number">2017</span>', 'js');</span><br><span class="line">console.<span class="built_in">log</span>(book);                  <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">title</span>);          <span class="comment">//JavaScript</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">time</span>);           <span class="comment">//2017</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">type</span>);           <span class="comment">//js</span></span><br></pre></td></tr></table></figure>
<p>new关键字的作用可以看作是对当前对象的this不停的赋值，然而例子中没有用new，所以就会直接执行这个函数，而这个函数是在全局作用域中执行的，所以属性被添加到了window上面。又因为函数中没有return语句，所以得到了undefined。<br>为了避免这种情况，我们可以使用安全模式。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书安全类</span></span><br><span class="line">var Book = function(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>) &#123;</span><br><span class="line">    <span class="comment">//判断执行过程中this是否是当前这个对象（如果是说明是用new创建的）</span></span><br><span class="line">    <span class="keyword">if</span>(this instanceof Book) &#123;</span><br><span class="line">        this.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">        this.<span class="built_in">time</span> = <span class="built_in">time</span>;</span><br><span class="line">        this.<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(<span class="built_in">title</span>, <span class="built_in">time</span>, <span class="built_in">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var book = Book('JavaScript', '<span class="number">2017</span>', 'js');</span><br><span class="line">console.<span class="built_in">log</span>(book);                  <span class="comment">//Book</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">title</span>);            <span class="comment">//JavaScript</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">time</span>);             <span class="comment">//2017</span></span><br><span class="line">console.<span class="built_in">log</span>(book.<span class="built_in">type</span>);             <span class="comment">//js</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">title</span>);          <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">time</span>);           <span class="comment">//undefined</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">window</span>.<span class="built_in">type</span>);           <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp使用心得]]></title>
      <url>/2018/01/19/20180119_1/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OkHttp是一款适用于Android和Java应用程序的HTTP&amp;HTTP2客户端。它有如下特性：</p>
<ul>
<li>支持http2，对一台机器的所有请求共享同一个socket </li>
<li>内置连接池，支持连接复用，减少延迟 </li>
<li>支持透明的gzip压缩响应体 </li>
<li>通过缓存避免重复的请求 </li>
<li>请求失败时自动重试主机的其他ip，自动重定向 </li>
<li>好用的API</li>
</ul>
<a id="more"></a>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>以Java为例，通常使用Maven构建方式，在pom文件中加入依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><ol>
<li>先实例化okhttp，构建一个request，由于get是默认方式，所以设置一个url地址就可以了，也可以通过Request.Builder设置更多的参数。</li>
<li>然后通过client创建一个call对象并发送请求。</li>
<li>通过response.body().string()获取返回的字符串。这个body()其实就是ResponseBody对象。</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Request</span> <span class="built_in">request</span> = <span class="keyword">new</span> <span class="built_in">Request</span>.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Response</span> <span class="built_in">response</span> = client.newCall(<span class="built_in">request</span>).<span class="keyword">execute</span>();</span><br><span class="line"><span class="built_in">String</span> responseBody = <span class="built_in">response</span>.body().<span class="built_in">string</span>();</span><br></pre></td></tr></table></figure>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><ul>
<li>提交字符串</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"text/plain; charset=utf-8"</span>);</span><br><span class="line"><span class="attribute">String str</span> = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, str);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure>
<ul>
<li>提交json</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"><span class="attribute">String json</span> = <span class="string">"&#123;'name':'kmt','sex':'man'&#125;"</span>;</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, json);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure>
<ul>
<li>提交form表单</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient<span class="built_in"> client </span>= new OkHttpClient();</span><br><span class="line"></span><br><span class="line">RequestBody body = new FormBody.Builder()</span><br><span class="line">    .<span class="builtin-name">add</span>(<span class="string">"name"</span>, <span class="string">"kmt"</span>)</span><br><span class="line">    .<span class="builtin-name">add</span>(<span class="string">"sex"</span>, <span class="string">"man"</span>)</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">String responseBody = response.body().string();</span><br></pre></td></tr></table></figure>
<ul>
<li>上传文件</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="attribute">File file</span> = new File(<span class="string">"/file/test.png"</span>);</span><br><span class="line"><span class="attribute">RequestBody body</span> = RequestBody.create(mediaType, file);</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(body)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure>
<ul>
<li>提交分块请求</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OkHttpClient client</span> = new OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="attribute">MediaType mediaType</span> = MediaType.parse(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="attribute">File file</span> = new File(<span class="string">"/file/test.png"</span>);</span><br><span class="line"><span class="attribute">RequestBody fileBody</span> = RequestBody.create(mediaType, file);</span><br><span class="line"></span><br><span class="line"><span class="attribute">RequestBody requestBody</span> = new MultipartBody.Builder()</span><br><span class="line">    .setType(MultipartBody.FORM)</span><br><span class="line">    .addFormDataPart(<span class="string">"file"</span>, <span class="string">"test_img"</span>, fileBody)</span><br><span class="line">    .addFormDataPart(<span class="string">"name"</span>, <span class="string">"kmt"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Request request</span> = new Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .post(requestBody)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="attribute">Response response</span> = client.newCall(request).execute();</span><br><span class="line"><span class="attribute">String responseBody</span> = response.body().string();</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>设置超时时间</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient<span class="built_in"> client </span>= new OkHttpClient.Builder()</span><br><span class="line">    .connectTimeout(10, TimeUnit.SECONDS)</span><br><span class="line">    .readTimeout(10,TimeUnit.SECONDS)</span><br><span class="line">    .writeTimeout(10,TimeUnit.SECONDS)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>
<ul>
<li>添加请求头</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Request request = new Request.Builder()</span><br><span class="line"><span class="meta">    .url</span>(url)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"authorization"</span>, authorization)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line"><span class="meta">    .addHeader</span>(<span class="string">"cache-control"</span>, <span class="string">"no-cache"</span>)</span><br><span class="line"><span class="meta">    .post</span>(body)</span><br><span class="line"><span class="meta">    .build</span>()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>异步</li>
</ul>
<p>client.newCall(request).execute()是同步的，client.newCall(request).enqueue()是异步的。onFailure是请求失败执行的方法，onResponse是请求成功执行的方法。</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">client.newCall(<span class="built_in">request</span>).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void onFailure(<span class="keyword">Call</span> <span class="keyword">call</span>, IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void onResponse(<span class="keyword">Call</span> <span class="keyword">call</span>, <span class="built_in">Response</span> <span class="built_in">response</span>) throws IOException &#123;</span><br><span class="line">        <span class="built_in">String</span> responseBody = <span class="built_in">response</span>.body().<span class="built_in">string</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OkHttp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象编程（上）]]></title>
      <url>/2018/01/13/20180113/</url>
      <content type="html"><![CDATA[<p>面向对象编程（Object-oriented programming，OOP）是一种程序设计范型。它将对象作为程序的基本单元，将程序和数据封装其中，以提高程序的重用性、灵活性和扩展性。</p>
<p><strong>1.用对象收编变量</strong></p>
<p>对象有属性和方法，我们要访问它的属性或者方法时，可通过点语法向下遍历查询得到。<br>例如：我们可以创建一个检测对象，然后把我们的方法放在里面。</p>
<a id="more"></a>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用它们很简单，比如检测姓名：<code>CheckObject.checkName();</code></p>
<p><strong>2.对象的另一种形式</strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">CheckObject.checkName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkEmail = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkPassword = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用和前面的方式是一样的，但这个对象不能复制一份，或者说这个对象类在用new关键字创建新的对象时，新创建的对象是不能继承这些方法的。</p>
<p><strong>3.真假对象</strong></p>
<p>如果想简单地复制一下对象，可以将方法放在一个函数对象中。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证姓名</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证邮箱</span></span><br><span class="line">        &#125;,</span><br><span class="line">        checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//验证密码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当每次调用这个函数的时候都返回了一个新对象，这样每个人在使用时就互不影响了。<br>例如检测邮箱：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = CheckObject()<span class="comment">;</span></span><br><span class="line">a.checkEmail()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>4.类也可以</strong></p>
<p>上面并不是一个真正意义上类的创建方式，并且创建的对象a和对象CheckObject没有任何关系（返回出来的对象本身与CheckObject对象无关）。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.checkEmail = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.checkPassword = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这样的对象就可以看成类了，用类创建对象需要用到关键字new。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">new</span> <span class="title">CheckObject</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkEmail</span>();</span></span><br></pre></td></tr></table></figure>
<p><strong>5.一个检测类</strong></p>
<p>上面的类把所有的方法放在函数内部，通过this定义，所以每一次通过new关键字创建新对象的时候，新创建的对象都会对类的this上的属性进行复制，所以这些新创建的对象都会有自己的一套方法，然而有时候这么做造成的消耗是很奢侈的，我们需要处理一下。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">CheckObject.prototype = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样创建对象实例的时候，创建出来的对象所拥有的方法就都是一个了，因为它们都要依赖prototype原型依次寻找，而找到的方法都是同一个，它们都绑定在CheckObject对象类的原型上。</p>
<p><strong>6.方法还可以这样用</strong></p>
<p>使用上面方式定义的类如下：</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">new</span> <span class="title">CheckObject</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkName</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkEmail</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">checkPassword</span>();</span></span><br></pre></td></tr></table></figure>
<p>调用了3个方法，但是对象a书写了3遍，这是可以避免的，需要在声明的每一个方法末尾处将当前对象返回，在JS中this指向的就是当前对象。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证姓名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">CheckObject.checkName().checkEmail().checkPassword();</span><br></pre></td></tr></table></figure>
<p>当然同样的方式还可以放到类的原型对象中。</p>
<p><strong>7.函数的祖先</strong></p>
<p>prototype.js是一款JS框架，里面为我们方便地封装了很多方法，它最大的特点就是对源生对象（Function、Array、Object等）的拓展。<br>比如你想给每一个函数都添加一个检测邮箱的方法：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span>.checkEmail  = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">    //验证邮箱</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">f.checkEmail();</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">()</span>;</span></span><br><span class="line">f.checkEmail();</span><br></pre></td></tr></table></figure>
<p>注意，这么做是不允许的，因为你污染了原生对象Function，所以别人创建的函数也会被你创建的函数所污染，造成不必要的开销，但是你可以抽象出一个统一添加方法的功能方法。</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span>.addMethod = <span class="function"><span class="keyword">function</span><span class="params">(name, fn)</span></span> &#123;</span><br><span class="line">    this[<span class="keyword">name</span>] = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methods.addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;);</span><br><span class="line">methods.checkEmail();</span><br></pre></td></tr></table></figure>
<p>这样只有methods对象才有checkEmail方法。</p>
<p><strong>8.链式添加方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.addMethod = <span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[name] = fn;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">methods.addMethod(<span class="string">'checkName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;).addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意上面只是链式添加方法，不能链式使用，如果使用<code>methods.checkName().checkEmail()</code>只会执行<code>checkName()</code>方法并报如下错误：<code>Cannot read property &#39;checkEmail&#39; of undefined.</code><br>如果想要链式使用，添加的每个方法需要将this返回。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">methods.addMethod(<span class="string">'checkName'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;).addMethod(<span class="string">'checkEmail'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证邮箱</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在<code>methods.checkName().checkEmail()</code>就可以正常运行了。</p>
<p><strong>9.用类式调用方式使用方法</strong></p>
<p>添加方法跟上面一样，但在使用的时候要注意了，不能直接使用，要通过new关键字来创建新对象。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">new</span> <span class="title">Methods</span>();</span></span><br><span class="line"><span class="function"><span class="title">m</span>.<span class="title">checkEmail</span>();</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/12/20180112/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
